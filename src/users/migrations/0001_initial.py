# Generated by Django 5.2.7 on 2025-10-20 11:35

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('building', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название роли')),
                ('has_statistics', models.BooleanField(default=False, verbose_name='Доступ к статистике')),
                ('has_cashbox', models.BooleanField(default=False, verbose_name='Доступ к кассе')),
                ('has_receipt', models.BooleanField(default=False, verbose_name='Доступ к квитанции')),
                ('has_personal_account', models.BooleanField(default=False, verbose_name='Доступ к лицевому счету')),
                ('has_apartment', models.BooleanField(default=False, verbose_name='Доступ к квартире')),
                ('has_owner', models.BooleanField(default=False, verbose_name='Доступ к владельцу')),
                ('has_house', models.BooleanField(default=False, verbose_name='Доступ к домам')),
                ('has_messege', models.BooleanField(default=False, verbose_name='Доступ к сообщениям')),
                ('has_ticket', models.BooleanField(default=False, verbose_name='Доступ к заявкам')),
                ('has_counters', models.BooleanField(default=False, verbose_name='Доступ к счетчику')),
                ('has_management', models.BooleanField(default=False, verbose_name='Доступ к управлению сайтом')),
                ('has_service', models.BooleanField(default=False, verbose_name='Доступ к услуге')),
                ('has_tariff', models.BooleanField(default=False, verbose_name='Доступ к тарифу')),
                ('has_role', models.BooleanField(default=False, verbose_name='Доступ к роле')),
                ('has_user', models.BooleanField(default=False, verbose_name='Доступ к пользователю')),
                ('has_payment_details', models.BooleanField(default=False, verbose_name='Доступ к платежным реквизитам')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_name', models.CharField(blank=True, max_length=150, verbose_name='Отчество')),
                ('user_type', models.CharField(choices=[('employee', 'Сотрудник'), ('owner', 'Владелец')], default='owner', max_length=10, verbose_name='Тип пользователя')),
                ('status', models.CharField(choices=[('active', 'Активен'), ('inactive', 'Отключен'), ('new', 'Новый')], default='new', max_length=10, verbose_name='Статус')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Изображение профиля')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('description', models.TextField(blank=True, verbose_name='Заметки о владельце')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Телефон')),
                ('viber', models.CharField(blank=True, max_length=20, verbose_name='Viber')),
                ('telegram', models.CharField(blank=True, max_length=50, verbose_name='Telegram')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.role', verbose_name='Роль')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Тема')),
                ('text', models.TextField(verbose_name='Текст сообщения')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Дата отправки')),
                ('sender', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_messages', to=settings.AUTH_USER_MODEL, verbose_name='Отправитель')),
            ],
            options={
                'verbose_name': 'Сообщение',
                'verbose_name_plural': 'Сообщения',
            },
        ),
        migrations.CreateModel(
            name='MessageRecipient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.message', verbose_name='Сообщение')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Получатель')),
            ],
            options={
                'verbose_name': 'Получатель сообщения',
                'verbose_name_plural': 'Получатели сообщений',
                'unique_together': {('message', 'user')},
            },
        ),
        migrations.AddField(
            model_name='message',
            name='recipients',
            field=models.ManyToManyField(related_name='received_messages', through='users.MessageRecipient', to=settings.AUTH_USER_MODEL, verbose_name='Получатели'),
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('new', 'Новое'), ('in_progress', 'В работе'), ('done', 'Выполнено')], default='new', max_length=20, verbose_name='Статус')),
                ('description', models.TextField(verbose_name='Описание проблемы')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('apartment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='building.apartment', verbose_name='Квартира')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_tickets', to=settings.AUTH_USER_MODEL, verbose_name='Автор заявки')),
                ('master', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL, verbose_name='Назначенный мастер')),
            ],
            options={
                'verbose_name': 'Заявка',
                'verbose_name_plural': 'Заявки',
            },
        ),
    ]
